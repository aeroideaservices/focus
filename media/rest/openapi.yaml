openapi: 3.0.0
info:
  title: "FOCUS : media"
  description: Сервис для управления media
  version: 1.0.0

servers:
  - url: https://krakend.farmperspektiva.aeroidea.ru/api/v1/admin
    description: CMS API на деве

paths:
  /media:
    get:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Получение списка медиафайлов
      description: Получение списка медиафайлов
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/order'
        - $ref: '#/components/parameters/parentFolderId'
      responses:
        200:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaList'
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/folders:
    get:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Получение дерева директорий
      description: Получение дерева директорий
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
      responses:
        200:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      id:
                        $ref: '#/components/schemas/Uuid'
                      depthLevel:
                        type: integer
                  - $ref: '#/components/schemas/UpdateMediaFolder'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        500:
          $ref: '#/components/responses/500Error'
    post:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Создание папки
      description: Создание папки
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
      requestBody:
        description: Параметры создаваемой папки
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMediaFolder'
      responses:
        201:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/folders/{folder-id}:
    get:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Получение информации по директории
      description: Получение информации по директории
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/folderId"
      responses:
        200:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFolder'
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        500:
          $ref: '#/components/responses/500Error'
    delete:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Удаление директории
      description: Удаление директории
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/folderId"
      responses:
        204:
          description: Метод успешно отработал
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/folders/{folder-id}/move:
    patch:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Перемещение директории в новую директорию
      description: Перемещение директории в новую директорию
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/folderId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                parentFolderId:
                  $ref: '#/components/schemas/Uuid'
      responses:
        204:
          description: Метод успешно отработал
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/folders/{folder-id}/rename:
    patch:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Изменение названия директории
      description: Изменение названия директории
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/folderId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Новая папка 2"

      responses:
        204:
          description: Метод успешно отработал
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/files:
    post:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Загрузка файла в медиабиблиотеку
      description: Загрузка файла в медиабиблиотеку
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
      requestBody:
        required: true
        description: Параметры запроса
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                alt:
                  type: string
                  minimum: 3
                  maximum: 50
                title:
                  type: string
                  minimum: 3
                  maximum: 50
                folderId:
                  $ref: '#/components/schemas/Uuid'
      responses:
        201:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: '#/components/schemas/Uuid'
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/files/upload:
    post:
      tags:
        - Media
      summary: Загрузка файла в медиа библиотеку
      description: Загрузка файла в медиа библиотеку
      parameters:
        - $ref: "#/components/parameters/folderIdQuery"
      requestBody:
        required: true
        description: Параметры запроса
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: integer
                    nullable: false
                    required: true
                    enum:
                      - 1
                      - 0
                  file:
                    type: object
                    nullable: true
                    properties:
                      url:
                        type: string
                        format: uri
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/files/upload-list:
    post:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Загрузка файла в медиа-библиотеку
      description: Загрузка файла в медиа-библиотеку
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
      requestBody:
        required: true
        description: Параметры запроса
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - files
              properties:
                files:
                  type: array
                  items:
                    $ref: "#/components/schemas/BinaryFile"
                  minItems: 1
                  maxItems: 10
                folderId:
                  $ref: '#/components/schemas/Uuid'
      responses:
        201:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                type: object
                properties:
                  ids:
                    type: array
                    items:
                      $ref: '#/components/schemas/Uuid'
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/files/{file-id}:
    get:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Получение информации по файлу
      description: Получение информации по файлу
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/fileId"
      responses:
        200:
          description: Метод успешно отработал
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        500:
          $ref: '#/components/responses/500Error'
    delete:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Удаление файла
      description: Удаление файла
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/fileId"
      responses:
        204:
          description: Метод успешно отработал
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/files/{file-id}/move:
    patch:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Перемещение файла
      description: Перемещение файла
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/fileId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                folderId:
                  $ref: '#/components/schemas/Uuid'
      responses:
        204:
          description: Метод успешно отработал
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'
  /media/files/{file-id}/rename:
    patch:
      tags:
        - Media
      security:
        - OAuth2: [ admin ]
      summary: Изменение названия файла
      description: Изменение названия файла
      parameters:
        - $ref: "#/components/parameters/serviceCodeHeader"
        - $ref: "#/components/parameters/fileId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "Новый файл 2"
                  minimum: 3
                  maximum: 50
      responses:
        204:
          description: Метод успешно отработал
        400:
          $ref: '#/components/responses/400Error'
        401:
          $ref: '#/components/responses/401Error'
        403:
          $ref: '#/components/responses/403Error'
        404:
          $ref: '#/components/responses/404Error'
        409:
          $ref: '#/components/responses/409Error'
        500:
          $ref: '#/components/responses/500Error'

components:
  parameters:
    serviceCode:
      name: service-code
      in: path
      required: true
      description: Код сервиса, к которому идет запрос
      schema:
        type: string
        example: catalog

    serviceCodeHeader:
      name: Service-Code
      in: header
      required: true
      description: Код сервиса, к которому идет запрос
      schema:
        type: string
        example: catalog

    offset:
      name: offset
      in: query
      required: true
      description: Номер строки, которой начинается выборка
      schema:
        minimum: 0
        type: integer
        example: 0

    limit:
      name: limit
      required: true
      in: query
      description: Количество возвращаемых объектов на странице
      schema:
        type: integer
        minimum: 10
        maximum: 100
        example: 20

    sort:
      name: sort
      in: query
      description: Поле для сортировки
      schema:
        type: string
        example: id

    order:
      name: order
      in: query
      description: Направление для сортировки
      schema:
        type: string
        enum:
          - asc
          - desc

    configurationId:
      name: configuration-id
      required: true
      in: path
      description: ID конфигурации
      schema:
        $ref: "#/components/schemas/Uuid"

    optionId:
      name: option-id
      required: true
      in: path
      description: ID настройки конфигурации
      schema:
        $ref: "#/components/schemas/Uuid"

    folderId:
      name: folder-id
      in: path
      required: true
      description: ID директории
      schema:
        $ref: "#/components/schemas/Uuid"

    folderIdQuery:
      name: folderId
      in: query
      required: false
      description: ID директории
      schema:
        $ref: "#/components/schemas/Uuid"

    fileId:
      name: file-id
      in: path
      required: true
      description: ID файла
      schema:
        $ref: "#/components/schemas/Uuid"

    parentFolderId:
      name: parentFolderId
      in: query
      description: ID родительской директории
      schema:
        $ref: "#/components/schemas/Uuid"

    formId:
      name: form-id
      required: true
      in: path
      description: ID формы
      schema:
        $ref: "#/components/schemas/Uuid"

    formFieldId:
      name: form-field-id
      required: true
      in: path
      description: ID поля формы
      schema:
        $ref: "#/components/schemas/Uuid"

    formResultId:
      name: form-result-id
      required: true
      in: path
      description: ID результата формы
      schema:
        $ref: "#/components/schemas/Uuid"

    query:
      name: query
      in: query
      description: Поисковый запрос
      schema:
        type: string
        example: "Перезвоните мне"

    ids:
      name: ids
      in: query
      description: Поисковый запрос
      schema:
        type: array
        items:
          $ref: "#/components/schemas/Uuid"

    filter:
      name: filter
      in: query
      schema:
        type: object
        additionalProperties: false
        properties:
          field:
            description: Значение поля
            type: string
            example: field_value
      style: deepObject

    menuId:
      name: menu-id
      in: path
      required: true
      description: ID меню
      schema:
        $ref: "#/components/schemas/Uuid"

    menuItemId:
      name: menu-item-id
      in: path
      required: true
      description: ID пункта меню
      schema:
        $ref: "#/components/schemas/Uuid"

    parentMenuItemId:
      name: parentMenuItemId
      in: query
      description: ID родительского пункта меню
      schema:
        $ref: "#/components/schemas/Uuid"

    modelCode:
      name: model-code
      in: path
      description: Идентификатор модели
      required: true
      schema:
        type: string

    fieldCode:
      name: field-code
      in: path
      description: Идентификатор поля модели
      required: true
      schema:
        type: string

    modelElementId:
      name: model-element-id
      in: path
      description: Идентификатор элемента модели
      required: true
      schema:
        $ref: '#/components/schemas/Uuid'

    mailTemplatesIds:
      name: mailTemplatesIds
      in: query
      description: Id шаблонов писем
      schema:
        type: array
        items:
          $ref: "#/components/schemas/Uuid"

    mailTemplateId:
      name: mail-template-id
      in: path
      required: true
      description: Id шаблона письма
      schema:
        $ref: "#/components/schemas/Uuid"

    formResultIds:
      name: formResultIds
      required: true
      in: query
      description: Список ID результатов формы
      schema:
        type: array
        minimum: 1
        items:
          $ref: '#/components/schemas/Uuid'


  schemas:

    # --------------------  MEDIA  -------------------------------
    BinaryFile:
      type: string
      format: binary
      title: Файл
      description: Загружаемый файл

    MediaPreview:
      type: object
      properties:
        resourceType:
          type: string
          enum:
            - file
            - folder
        folderFields:
          $ref: '#/components/schemas/MediaFolderPreview'
        fileFields:
          $ref: '#/components/schemas/MediaFilePreview'

    MediaList:
      type: object
      allOf:
        - $ref: "#/components/schemas/ListItems"
        - properties:
            breadcrumbs:
              type: array
              description: Хлебные крошки
              items:
                $ref: "#/components/schemas/Breadcrumb"
            items:
              type: array
              description: Список конфигураций
              items:
                $ref: "#/components/schemas/MediaPreview"

    Breadcrumb:
      type: object
      description: Хлебная крошка для папки
      properties:
        name:
          type: string
          description: Название хлебной крошки
        folderId:
          $ref: '#/components/schemas/Uuid'

    MediaFilePreview:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: " Новый файл 1"
        size:
          type: string
          example: 19,5 Б
        url:
          type: string
          format: uri
        ext:
          type: string
          example: zip

    MediaFile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          example: " Новый файл 1"
        size:
          type: string
          example: 19,5 Б
        folderId:
          $ref: '#/components/schemas/Uuid'
        alt:
          type: string
        title:
          type: string
        updatedAt:
          type: string
          example: 10-05-2022 10:12:53
        url:
          type: string
          format: uri
        ext:
          type: string
          example: zip
        contentType:
          type: string
          example: image/png

    MediaFolder:
      allOf:
        - type: object
          description: |
            Объект директории
          properties:
            id:
              $ref: '#/components/schemas/Uuid'
            size:
              type: string
              example: 19,5 Б
        - $ref: '#/components/schemas/UpdateMediaFolder'

    MediaFolderPreview:
      type: object
      description: |
        Объект директории
      properties:
        id:
          $ref: '#/components/schemas/Uuid'
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Новая папка 1"
        size:
          type: string
          example: 19,5 Б

    UpdateMediaFolder:
      description: Объект сохранения директории
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minimum: 3
          maximum: 50
          example: "Новая папка 1"
        parentFolderId:
          $ref: '#/components/schemas/Uuid'

    # --------------------  END MEDIA  -------------------------------

    ListItems:
      type: object
      required:
        - total
        - items
      properties:
        total:
          type: integer
          description: |
            Общее количество элементов
          example: 10

    Uuid:
      type: string
      format: uuid
      description: Идентификатор элемента (Уникальный)
      example: '73e0bb5e-057a-427c-a5fb-3f3254f0f7df'

    Error:
      required:
        - applicationErrorCode
        - message
      type: object
      description: Описание ошибки для всех методов
      properties:
        applicationErrorCode:
          type: string
          description: Код ошибки, к которому привел вызов метода
          example: tooManyRequests
        message:
          type: string
          description: Человекочитаемое сообщение об ошибке
          example: Ошибка отправки СМС-сообщения
        debug:
          type: string
          description: Дополнительная отладочная информация
          example: 'org.postgresql.util.PSQLException: ERROR: canceling statement
            due to user request'

    Success:
      required:
        - id
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Uuid'

  examples:
    kladrIdsRequest:
      value:
        uri: "https://krakend.farmperspektiva.aeroidea.ru/api/v1/geo/suggest/address"
        meth: "POST"
        save: "kladrId"
        display: "value"
        body:
          count: 20
          fromBound: "region"
          toBound: "settlement"
        paginated: false
      summary: Описание запроса получения КЛАДР

    productsListRequest:
      value:
        service: "catalog"
        uri: "/api/v1/models/product/elements?fields=id&fields=name&sort=name"
        meth: "GET"
        save: "id"
        display: "title"
        paginated: true
      summary: Описание запроса получения продуктов из сервиса Каталог

    mediaUploadFormFieldOpt:
      value:
        byFile: "/media/files/upload"
      summary: Описание запроса загрузки изображения

    editorJsFormField:
      value:
        type: select
        dataType: string
        multiple: true
        opts:
          mediaUpload:
            $ref: '#/components/examples/mediaUploadFormFieldOpt'
          productsList:
            $ref: '#/components/examples/productsListRequest'

    selectKladrIdsFormField:
      value:
        type: select
        dataType: string
        multiple: true
        opts:
          request:
            $ref: '#/components/examples/kladrIdsRequest'

    selectProductsFormField:
      value:
        type: select
        dataType: string
        multiple: true
        opts:
          request:
            $ref: '#/components/examples/productsListRequest'

    productsField:
      externalValue: '#/components/examples/selectProductsFormField'
      value:
        name: Продукты
        code: products
        viewType: modelsCollection
        formField:
          $ref: '#/components/examples/selectProductsFormField'
        filterable: false
        shownInList: false
        sortable: false
        associationCode: product

    allFieldsExample:
      value:
        items:
          $ref: '#/components/examples/productsField'

  responses:
    201:
      description: Значение создано
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    204:
      description: Успешно

    400Error:
      description: Ошибочный запрос, например, отсутствует один из параметров
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    401Error:
      description: Ошибка аутентификации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    403Error:
      description: Недостаточно прав для выполнения запроса
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    404Error:
      description: Запрашиваемый ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    409Error:
      description: Ресурс, создаваемый методом POST, уже существует
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    500Error:
      description: Серверная ошибка
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        password:
          tokenUrl: /api/v1/oauth/token
          scopes:
            admin: Скоуп операции администрирования данных.

